// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  firstName     String
  lastName      String?
  image         String    @default("https://freepikpsd.com/file/2019/10/default-user-profile-image-png-2-Transparent-Images-300x300.png")
  bio           String?
  password      String
  accountStatus String    @default("public")
  verified      Boolean   @default(false)
  followedBy    User[]    @relation("UserFollows", references: [id])
  following     User[]    @relation("UserFollows", references: [id])
  posts         Post[]
  comments      Comment[]
  replies       Reply[]
  likes         Like[]
  stories       Story[]
  searchedFor   User[]    @relation("UserSearchedFor", references: [id])
  searching     User[]    @relation("UserSearchedFor", references: [id])
}

model Post {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  image     String
  caption   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  postId    Int
  replies   Reply[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commentId Int
  userId    Int
}

model Like {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
}

model Story {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  content String
  status  String @default("active")
  userId  Int
}
